import { FormEvent, useContext, useMemo, useState, } from 'react';
import Head from 'next/head'
import styles from '../../../styles/home.module.scss';
import {AuthContext} from '../../contexts/AuthContext';
import {canSSRAuth} from "../../utils/canSSRAuth";
import {GetServerSidePropsContext} from "next";
import {ParsedUrlQuery} from "querystring";
import {setupAPIClient} from "../../services/api";
import {Header} from "../../components/Header";
import {GenericMaterialTableProps, GenericTable} from "../../components/ui/Table";
import {handleRowDelete#entity#} from "../../utils/handleDelete";
import {handleRowGet#entity#} from "../../utils/handleGet";
import { Form, ItemFormProps, TYPEELEMENT, ACTIONFORM } from '../../components/ui/Form/index';
import { DashboardProps, RowData } from '../../utils/props';
import { ModalDash } from '../../components/Modal';
import {Column} from "material-table";
import { getLookUpProps, getLookUpEnum, returnDefaultEnum, getArrayCombo } from '../../utils/function';
import LoadingUtil from "../../utils/loading";
#import_enum#
#import_relation#

export function #entity#Column(enums: EnumProps[][] #param_props_col#): Column<RowData>[]{
		return [
#COLUMNS#
	];
}
export interface #entity#RowDataProps extends #entity#Props, RowData {

}

export type EnumProps = {
  id: string;
  value: string;
  field: string;
}

export type #entity#Props={
  #interface_column#
}

export type page#entity#Props = {
  dashboard: DashboardProps
  #entity_lower#: #entity#RowDataProps[]
  enums: EnumProps[][]
  #list_relation_props#
}

export default function #entity#({dashboard, #entity_lower#, enums #param_props#}: page#entity#Props) {
  
  const [#entity#, set#entity#] = useState<#entity#Props>({
    #default_columns#
    ...returnDefaultEnum(enums)
  });  
  const [loading, setLoading] = useState(false);
  const [#entity#Item, set#entity#Item] = useState<#entity#RowDataProps>();
  const [#entity#Selected, set#entity#Selected] = useState<#entity#RowDataProps>();
  const [rest, setRest] = useState<GenericMaterialTableProps>();
  const[list#entity#s, setList#entity#s] = useState<#entity#RowDataProps[]>([]);
	
  function clearForm(){
    set#entity#({
      #default_columns#
    ...returnDefaultEnum(enums)
    });
  }
  
  function getFieldsUpdate(param: any):ItemFormProps[]{
    let ret : ItemFormProps[] = [#update_cols#];
    return ret;
  }

  function getFieldsRegister(param: any):ItemFormProps[]{
    const ret : ItemFormProps[] = [#select_cols#];
    return ret;
  }

  async function postFormAction(){
    set#entity#Selected(undefined);
    setList#entity#s(await handleRowGet#entity#(dashboard.user));
    setLoading(false);
    clearForm();
  }


  useMemo(async () => {
	setList#entity#s(await handleRowGet#entity#(dashboard.user));
  },[]);

  useMemo(()=>{
    setRest({
      columns: #entity#Column(enums #param_props#),
      data: list#entity#s,
      handleRowDelete: handleRowDelete#entity#,
      setData: set#entity#Item,
      options: {
        pageSize: 10
      }
    });
  },[list#entity#s]);  


  const table#entity#=useMemo(()=>{
    return(<GenericTable rest={rest} setRest={setRest} selectedRow={#entity#Selected} setSelectedRow={set#entity#Selected} />);
  },[rest, #entity#Selected, set#entity#Selected]);

  return (
    <>
    <Head>
      <title>#entity# Registration</title>
    </Head>
    <Header name={dashboard.user.name} email={dashboard.user.email} id={dashboard.user.id} role={dashboard.user.role}/>
	<LoadingUtil/>
    <div className={styles.containerCenter}>
      <div className={styles.login}>
        <h1>Register</h1>

        <Form
          postFormAction={postFormAction}
          state={#entity#}
          setState={set#entity#}
          url={'/#entity_lower#'}
          fields={getFieldsRegister(#entity#)}
          action={ACTIONFORM.POST}
        />
        {#entity#Selected?
        <ModalDash
              isOpen={#entity#Selected !== undefined}
              onRequestClose={function (): void {
                set#entity#Selected(undefined);
              } }
              component={<Form
                postFormAction={postFormAction}
                state={#entity#Selected}
                setState={set#entity#Selected}
                url={'/#entity_lower#'}
                fields={getFieldsUpdate(#entity#Selected)}
                action={ACTIONFORM.PATCH}
              />}
        />:
        <div className={styles.containerGrid}>{table#entity#}</div>}
      </div>

    </div>
    </>
  )
}

export const getServerSideProps = canSSRAuth(async (ctx: GetServerSidePropsContext<ParsedUrlQuery, string | false | object | undefined>) => {
  const apiClient = setupAPIClient(ctx);
  const me = (await apiClient.get('/me')).data
  #query_server_side#
  let send = {props:{}};
  send.props = {...send.props, dashboard: {message: {code: 200, message: ""},
      user: {id: me.id, name: me.name, email: me.email, role: me.role}},
	  #enums_server_side#
	  #param_server_side#
	  };
  return send;
})